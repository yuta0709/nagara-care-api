// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MealTime {
  BREAKFAST
  LUNCH
  DINNER
}

enum BeverageType {
  WATER
  TEA
  OTHER
}

enum DailyStatus {
  NORMAL
  WARNING
  ALERT
}

enum UserRole {
  GLOBAL_ADMIN
  TENANT_ADMIN
  CAREGIVER
}

enum Gender {
  MALE
  FEMALE
}

model Tenant {
  uid       String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  users              User[]
  residents          Resident[]
  foodRecords        FoodRecord[]
  bathRecords        BathRecord[]
  beverageRecords    BeverageRecord[]
  eliminationRecords EliminationRecord[]
  dailyRecords       DailyRecord[]
  subjects           Subject[]
  assessments        Assessment[]
}

model User {
  uid                String   @id @default(uuid())
  loginId            String   @unique
  passwordDigest     String
  familyName         String
  givenName          String
  familyNameFurigana String
  givenNameFurigana  String
  role               UserRole
  tenantUid          String?
  tenant             Tenant?  @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)
  createdAt          DateTime @default(now())

  foodRecords        FoodRecord[]
  bathRecords        BathRecord[]
  beverageRecords    BeverageRecord[]
  eliminationRecords EliminationRecord[]
  dailyRecords       DailyRecord[]
  assessments        Assessment[]
}

model Resident {
  uid                String   @id @default(uuid())
  tenantUid          String?
  tenant             Tenant?  @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)
  familyName         String
  givenName          String
  familyNameFurigana String
  givenNameFurigana  String
  dateOfBirth        DateTime
  gender             Gender
  admissionDate      DateTime
  createdAt          DateTime @default(now())

  foodRecords        FoodRecord[]
  bathRecords        BathRecord[]
  beverageRecords    BeverageRecord[]
  eliminationRecords EliminationRecord[]
  dailyRecords       DailyRecord[]
}

model FoodRecord {
  uid       String  @id @default(uuid())
  tenantUid String?
  tenant    Tenant? @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)

  caregiverUid String?
  caregiver    User?   @relation(fields: [caregiverUid], references: [uid], onDelete: SetNull)

  residentUid String?
  resident    Resident? @relation(fields: [residentUid], references: [uid], onDelete: SetNull)

  recordedAt           DateTime
  notes                String?
  mealTime             MealTime
  mainCoursePercentage Int
  sideDishPercentage   Int
  soupPercentage       Int
  beverageType         BeverageType
  beverageVolume       Int
}

model BathRecord {
  uid       String  @id @default(uuid())
  tenantUid String?
  tenant    Tenant? @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)

  caregiverUid String?
  caregiver    User?   @relation(fields: [caregiverUid], references: [uid], onDelete: SetNull)

  residentUid String?
  resident    Resident? @relation(fields: [residentUid], references: [uid], onDelete: SetNull)

  recordedAt DateTime
  notes      String?
  bathMethod String
}

model BeverageRecord {
  uid       String  @id @default(uuid())
  tenantUid String?
  tenant    Tenant? @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)

  caregiverUid String?
  caregiver    User?   @relation(fields: [caregiverUid], references: [uid], onDelete: SetNull)

  residentUid String?
  resident    Resident? @relation(fields: [residentUid], references: [uid], onDelete: SetNull)

  recordedAt   DateTime
  notes        String?
  beverageType BeverageType
  volume       Int
}

model EliminationRecord {
  uid       String  @id @default(uuid())
  tenantUid String?
  tenant    Tenant? @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)

  caregiverUid String?
  caregiver    User?   @relation(fields: [caregiverUid], references: [uid], onDelete: SetNull)

  residentUid String?
  resident    Resident? @relation(fields: [residentUid], references: [uid], onDelete: SetNull)

  recordedAt          DateTime
  notes               String?
  eliminationMethod   String
  hasFeces            Boolean
  fecalIncontinence   Boolean?
  fecesAppearance     String?
  fecesVolume         Int?
  hasUrine            Boolean
  urinaryIncontinence Boolean?
  urineAppearance     String?
  urineVolume         Int?
}

model DailyRecord {
  uid       String  @id @default(uuid())
  tenantUid String?
  tenant    Tenant? @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)

  caregiverUid String?
  caregiver    User?   @relation(fields: [caregiverUid], references: [uid], onDelete: SetNull)

  residentUid String?
  resident    Resident? @relation(fields: [residentUid], references: [uid], onDelete: SetNull)

  recordedAt  DateTime
  notes       String?
  dailyStatus DailyStatus?
}

// アセスメント関連

enum CareLevel {
  NEEDS_CARE_1
  NEEDS_CARE_2
  NEEDS_CARE_3
  NEEDS_CARE_4
  NEEDS_CARE_5
}

enum IndependenceLevel {
  INDEPENDENT
  J1
  J2
  A1
  A2
  B1
  B2
  C1
  C2
}

enum CognitiveIndependence {
  INDEPENDENT
  I
  IIa
  IIb
  IIIa
  IIIb
  IV
  M
}

model Subject {
  uid                String       @id @default(uuid())
  givenName          String
  familyName         String
  familyNameFurigana String
  givenNameFurigana  String
  dateOfBirth        DateTime
  gender             Gender
  assessments        Assessment[]
  tenantUid          String?
  tenant             Tenant?      @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Assessment {
  uid                    String                @id @default(uuid())
  subjectUid             String                @unique
  subject                Subject               @relation(fields: [subjectUid], references: [uid])
  tenantUid              String?
  tenant                 Tenant?               @relation(fields: [tenantUid], references: [uid], onDelete: SetNull)
  userUid                String?
  user                   User?                 @relation(fields: [userUid], references: [uid], onDelete: SetNull)
  // 家族構成
  familyInfo             String?
  // 要介護状態区分
  careLevel              CareLevel
  // 障害高齢者の日常生活自立度判定基準
  physicalIndependence   IndependenceLevel
  // 認知症高齢者の日常生活自立度判定基準
  cognitiveIndependence  CognitiveIndependence
  // 既往症
  medicalHistory         String?
  // 服用薬剤
  medications            String?
  // 使用しているフォーマルサービス
  formalServices         String?
  // 使用しているインフォーマルサービス
  informalSupport        String?
  // 相談に至った経緯
  consultationBackground String?
  // 生活史
  lifeHistory            String?
  // 主訴
  complaints             String?
  // 健康状態
  healthNotes            String?
  // 精神状態
  mentalStatus           String?
  // 身体状態
  physicalStatus         String?
  // ADL
  adlStatus              String?
  // コミュニケーション
  communication          String?
  // 日常生活
  dailyLife              String?
  // IADL
  instrumentalADL        String?
  // 参加・参加制約
  participation          String?
  // 環境
  environment            String?
  // 生活状況
  livingSituation        String?
  // 制度的環境
  legalSupport           String?
  // 個人因子
  personalTraits         String?
  // 文字起こし
  transcription          String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}
